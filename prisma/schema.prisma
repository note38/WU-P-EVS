generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  avatar    String?
  username  String     @unique
  email     String     @unique
  password  String
  role      Role       @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  clerkId   String?    @unique
  position  String?
  elections Election[]

  @@index([clerkId])
}

model Election {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(INACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById Int
  hideName    Boolean        @default(false)
  candidates  Candidate[]
  createdBy   User           @relation(fields: [createdById], references: [id])
  partylists  Partylist[]
  positions   Position[]
  votes       Vote[]
  voters      Voter[]

  @@index([status, startDate, endDate])
  @@index([hideName])
}

model Position {
  id            Int         @id @default(autoincrement())
  name          String
  maxCandidates Int         @default(1)
  electionId    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  yearId        Int?
  candidates    Candidate[]
  election      Election    @relation(fields: [electionId], references: [id])
  year          Year?       @relation(fields: [yearId], references: [id])
  votes         Vote[]

  @@index([electionId, yearId])
}

model Candidate {
  id          Int       @id @default(autoincrement())
  avatar      String?
  name        String
  positionId  Int
  partylistId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  electionId  Int
  yearId      Int?
  election    Election  @relation(fields: [electionId], references: [id])
  partylist   Partylist @relation(fields: [partylistId], references: [id])
  position    Position  @relation(fields: [positionId], references: [id])
  year        Year?     @relation(fields: [yearId], references: [id])

  @@index([positionId, partylistId])
  @@index([electionId])
  @@index([yearId])
}

model Voter {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  electionId      Int?
  status          VoterStatus @default(UNCAST)
  credentialsSent Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  avatar          String
  firstName       String
  hashpassword    String?
  lastName        String
  middleName      String
  yearId          Int
  role            Role        @default(VOTER)
  clerkId         String?     @unique
  votes           Vote[]
  election        Election?   @relation(fields: [electionId], references: [id], onDelete: Restrict)
  year            Year        @relation(fields: [yearId], references: [id])

  @@index([electionId, yearId])
  @@index([clerkId])
}

model Vote {
  id          Int      @id @default(autoincrement())
  voterId     Int
  candidateId Int
  positionId  Int
  electionId  Int
  votedAt     DateTime @default(now())
  election    Election @relation(fields: [electionId], references: [id])
  position    Position @relation(fields: [positionId], references: [id])
  voter       Voter    @relation(fields: [voterId], references: [id])

  @@unique([voterId, positionId, electionId])
  @@index([candidateId, positionId, electionId])
}

model Partylist {
  id         Int         @id @default(autoincrement())
  name       String
  electionId Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  candidates Candidate[]
  election   Election    @relation(fields: [electionId], references: [id])
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  years     Year[]
}

model Year {
  id           Int         @id @default(autoincrement())
  name         String
  departmentId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]
  positions    Position[]
  voters       Voter[]
  department   Department  @relation(fields: [departmentId], references: [id])
}

enum Role {
  ADMIN
  VOTER
}

enum ElectionStatus {
  INACTIVE
  ACTIVE
  COMPLETED
}

enum VoterStatus {
  UNCAST
  CAST
}
