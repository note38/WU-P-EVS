// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  VOTER
}

enum ElectionStatus {
  INACTIVE
  ACTIVE
  COMPLETED
}

enum VoterStatus {
  REGISTERED
  VOTED
}

model User {
  id          Int         @id @default(autoincrement())
  avatar      String?
  username    String      @unique
  email       String      @unique
  password    String
  role        Role        @default(ADMIN)
  elections   Election[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Election {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(INACTIVE)
  positions   Position[]
  partylists  Partylist[]
  candidates  Candidate[]
  voters      Voter[]
  votes       Vote[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById Int

  @@index([status, startDate, endDate])
}

model Position {
  id            Int          @id @default(autoincrement())
  name          String
  maxCandidates Int          @default(1)
  year        Year?     @relation(fields: [yearId], references: [id])
  yearId      Int?
  election      Election     @relation(fields: [electionId], references: [id])
  electionId    Int
  candidates    Candidate[]
  votes         Vote[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([electionId, yearId])
}

model Candidate {
  id          Int       @id @default(autoincrement())
  avatar      String?
  name        String
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  Int
  partylist   Partylist @relation(fields: [partylistId], references: [id])
  partylistId Int
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  Int
  year        Year?     @relation(fields: [yearId], references: [id])
  yearId      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([positionId, partylistId])
  @@index([electionId])
  @@index([yearId])
}

model Voter {
  id              Int         @id @default(autoincrement())
  avatar          String
  firstName       String
  lastName        String
  middleName      String
  email           String      @unique
  hashpassword    String
  role            Role        @default(VOTER)
  election        Election?    @relation(fields: [electionId], references: [id])
  electionId      Int
  year            Year        @relation(fields: [yearId], references: [id])
  yearId          Int
  status          VoterStatus @default(REGISTERED)
  credentialsSent Boolean     @default(false)
  votes           Vote[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([electionId, yearId])
}

model Vote {
  id          Int       @id @default(autoincrement())
  voter       Voter     @relation(fields: [voterId], references: [id])
  position    Position  @relation(fields: [positionId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])
  voterId     Int
  candidateId Int
  positionId  Int
  electionId  Int
  votedAt     DateTime  @default(now())

  @@unique([voterId, positionId, electionId])
  @@index([candidateId, positionId, electionId])
}

model Partylist {
  id          Int         @id @default(autoincrement())
  name        String
  election    Election    @relation(fields: [electionId], references: [id])
  electionId  Int
  candidates  Candidate[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Department {
  id          Int         @id @default(autoincrement())
  image       String?
  name        String
  years       Year[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Year {
  id           Int         @id @default(autoincrement())
  name         String
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  positions    Position[]
  voters       Voter[]
  candidates   Candidate[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}