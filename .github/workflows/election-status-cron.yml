name: Election Status Auto Update

on:
  schedule:
    # Run every minute as requested
    - cron: '* * * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger'

jobs:
  update-election-status:
    runs-on: ubuntu-latest
    
    steps:
      - name: Call Election Status Cron Endpoint
        run: |
          echo "🚀 Triggering election status update..."
          echo "⏰ Current time: $(date)"
          
          # Validate required secrets are set
          if [ -z "${{ secrets.DEPLOYMENT_URL }}" ]; then
            echo "❌ DEPLOYMENT_URL secret is not set"
            echo "💡 Please set the DEPLOYMENT_URL secret in GitHub repository settings"
            exit 1
          fi
          
          if [ -z "${{ secrets.CRON_SECRET }}" ]; then
            echo "❌ CRON_SECRET secret is not set"
            echo "💡 Please set the CRON_SECRET secret in GitHub repository settings"
            exit 1
          fi
          
          # Construct the full URL
          BASE_URL="${{ secrets.DEPLOYMENT_URL }}"
          # Remove trailing slash if present
          BASE_URL="${BASE_URL%/}"
          ENDPOINT="$BASE_URL/api/cron/election-status"
          
          echo "📡 Calling endpoint: $ENDPOINT"
          
          # Make request to the cron endpoint
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: github-actions-cron/1.0" \
            "$ENDPOINT")
          
          # Extract HTTP status and response body
          http_status=$(echo "$response" | tail -n1 | sed 's/HTTP_STATUS://')
          response_body=$(echo "$response" | sed '$d')
          
          echo "📊 Response Status: $http_status"
          echo "📄 Response Body: $response_body"
          
          # Check if request was successful
          if [ "$http_status" -eq 200 ]; then
            echo "✅ Election status update completed successfully"
            
            # Parse and display update information
            updated_count=$(echo "$response_body" | jq -r '.updatedCount // 0' 2>/dev/null || echo "0")
            message=$(echo "$response_body" | jq -r '.message // "Status check completed"' 2>/dev/null || echo "Status check completed")
            
            echo "📈 Updated elections: $updated_count"
            echo "💬 Message: $message"
            
            # Display updated elections if any
            if [ "$updated_count" -gt 0 ]; then
              echo "🗳️ Updated Elections:"
              echo "$response_body" | jq -r '.updatedElections[]? | "  - \(.name) (ID: \(.id)) → \(.status)"' 2>/dev/null || echo "  - Details not available"
            fi
          else
            echo "❌ Election status update failed with status: $http_status"
            echo "💥 Error response: $response_body"
            # Only exit with error for server errors, not client errors
            if [ "$http_status" -ge 500 ]; then
              exit 1
            fi
          fi

      - name: Log Completion
        if: always()
        run: |
          echo "🏁 Election status cron job completed at $(date)"
          echo "📋 Workflow triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "📝 Manual trigger reason: ${{ github.event.inputs.reason }}"
          fi